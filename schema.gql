# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddCRecipeTOAUserCollectionInput {
  collectionId: ID
  recipe: ID!
  userId: ID!
}

input AddExistingRecipeInput {
  recipeUrl: String!
  userEmail: String!
}

input AddFilterInput {
  filterType: String!
  values: [FilterValueInput!]!
}

input AddNewBlendIngredient {
  blendIngredientType: String
  blendNutrients: [AddNewBlendNutrientToBlendIngredient!]
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  description: String
  featuredImage: String
  gi: Float
  gl: Float
  images: [String!]
  ingredientName: String
  netCarbs: Float
  portions: [CreatePortion!]
  rxScore: Float
  varrient: ID
}

input AddNewBlendNutrient {
  altName: String
  blendId: String
  category: ID!
  isBookmarked: Boolean
  min_measure: String
  nutrientName: String!
  parent: ID
  parentIsCategory: Boolean
  rank: Float
  showChildren: Boolean
  status: String
  unitName: String
  units: String
}

input AddNewBlendNutrientFromSrc {
  blendNutrientIdForMaping: ID
  srcNutrientId: ID!
}

input AddNewBlendNutrientToBlendIngredient {
  blendNutrientRefference: ID!
  value: String!
}

input AddOrRemoveRecipeFromCollectionInput {
  addToTheseCollections: [ID!]
  isCollectionData: Boolean
  recipes: [ID!]!
  userId: ID!
}

input AddToLastModifiedCollectionInput {
  collectionId: ID
  recipe: ID!
  userId: ID!
}

input AddVersion {
  description: String
  errorIngredients: [ErrorIngredientInout!]
  ingredients: [CreateIngredientData!]
  postfixTitle: String!
  recipeId: ID!
  recipeInstructions: [String!]
  selectedImage: String
  servingSize: Float
  userId: ID!
}

input AddWidgetInput {
  bannerId: ID
  slug: String!
  widgetCollections: [WidgetCollection!]
  widgetName: String!
  widgetType: String!
}

type Admin {
  _id: ID!
  createdAt: DateTime!
  displayName: String
  email: String!
  firstName: String
  image: String
  lastName: String
  location: String
  notes: String
  number: String
  profilePicture: String
  role: ID
  title: String
}

type AdminCollection {
  _id: ID!
  children: [ID!]!
  collectionType: String!
  name: String!
}

input Age {
  months: Boolean
  quantity: Float
  years: Boolean
}

type AgeType {
  months: Boolean
  quantity: Float
  years: Boolean
}

type AllWikiList {
  healthWikiList: WikiListWithPagination!
  ingredientWikiList: WikiListWithPagination!
  nutrientWikiList: WikiListWithPagination!
}

type Banner {
  _id: ID!
  bannerName: String!
  createdAt: DateTime!
  description: String!
  domain: String!
  link: String!
  updatedAt: DateTime
}

input BannerInput {
  bannerName: String!
  description: String!
  domain: String!
  link: String!
}

type BlendIngredientData {
  _id: ID!
  blendNutrients: [BlendNutrient!]
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  description: String
  featuredImage: String
  gi: Float
  gl: Float
  images: [String!]
  ingredientName: String
  ingredientType: String
  netCarbs: Float
  notBlendNutrients: [NutrientValue!]
  portions: [BlendPortion!]
  rxScore: Float
  sourceName: String!
  srcFoodReference: Ingredient
  varrient: ID
}

input BlendIngredientInfo {
  ingredientId: String!
  value: Float
}

"""The types"""
enum BlendIngredientType {
  BALANCER
  BERRY
  FATTY
  FLAVOR
  FLOWERING
  FRUITY
  HERBAL
  LEAFY
  LIQUID
  ROOTY
  SEASONING
  TUBE_SQUASH
}

type BlendNutrient {
  blendNutrientRefference: BlendNutrientData
  value: String
}

type BlendNutrientCategory {
  _id: ID!
  blendId: String!
  categoryName: String!
  featuredImage: String
  images: [String!]
  isPublished: Boolean!
  keywords: [String!]
  nutrientDescription: String!
  rank: Float!
  slug: String
}

type BlendNutrientData {
  _id: ID!
  altName: String
  blendId: String
  category: BlendNutrientCategory
  isBookmarked: Boolean
  mapList: [map!]
  min_measure: String
  nutrientName: String
  parent: BlendNutrientData
  parentIsCategory: Boolean
  rank: Float
  related_sources: [BlendRelatedSource!]
  showChildren: Boolean
  status: String!
  unitName: String
  units: String
  usePriorityForMap: Boolean
}

type BlendNutrientStats {
  attainment: Float!
  dailyAverage: Float!
  dailyRecomended: Float!
  dateStats: [DateStat!]!
  ingredientStats: [IngredientStatsForNutrient!]!
  units: String
  upperLimit: Float!
}

type BlendPortion {
  _id: String
  default: Boolean
  measurement: String!
  measurement2: String
  meausermentWeight: String!
  sourceId: String
}

input BlendPortionInput {
  _id: String
  default: Boolean!
  measurement: String!
  measurement2: String
  meausermentWeight: String!
  sourceId: String
}

type BlendRelatedSource {
  source: String
  sourceId: ID
  sourceNutrientName: String
  units: String
}

type BlogBookmark {
  active: Boolean
  customBookmarkName: String
  link: String
}

type BlogBookmarkAndExternalGlobalLInk {
  blogBookmarks: [BlogBookmark!]!
  globalBookmarks: [ExternalBookmark!]!
}

type BlogCollection {
  _id: ID!
  blogs: [ID!]!
  collectionDataCount: Float!
  createdAt: DateTime!
  description: String!
  image: String
  memberId: ID!
  name: String!
  slug: String!
  updatedAt: DateTime
}

type BlogCollectionsWithDefaultCollection {
  blogCollections: [BlogCollection!]!
  defaultCollection: BlogCollection
}

type BlogComment {
  _id: ID!
  blogId: ID!
  comment: String!
  createdAt: DateTime!
  memberId: Member!
  updatedAt: DateTime
}

type Bookmark {
  active: Boolean
  customBookmarkName: String
  ingredientId: BookmarkIngredient
  link: String
  nutrientId: BookmarkNutrient
}

type BookmarkAndExternalGlobalLInk {
  bookmarks: [Bookmark!]!
  globalBookmarks: [ExternalBookmark!]!
}

type BookmarkIngredient {
  _id: ID!
  ingredientName: String!
  portions: [BlendPortion!]
}

type BookmarkNutrient {
  _id: ID!
  nutrientName: String!
}

type Brand {
  _id: ID!
  brandDescription: String
  brandIcon: String
  brandImage: String
  brandName: String!
  brandUrl: String
  canonicalURL: String
  isPublished: Boolean
  keywords: [String!]
  metaDesc: String
  siteMap: String
  slug: String
  title: String
}

type CalorieInfo {
  value: Float
}

input CalorieInput {
  dri: Float!
  goal: Float
}

type CalorieType {
  dri: Float
  goal: Float
}

type CategoryPercentage {
  _id: ID!
  count: Float
  name: String
  percentage: Float
}

type Challenge {
  _id: ID
  assignDate: DateTime!
  date: String
  dayName: String
  disabled: Boolean
  formattedDate: String
  images: [ImageWithHash!]
  posts: [ChallengePost!]!
}

type ChallengeAndChallengeDocs {
  challenge: [Challenge!]
  challengeInfo: ChallengeInfo
}

type ChallengeAndSingleChallengeDoc {
  challenge: Challenge
  challengeInfo: ChallengeInfo
  prevPost: PrevPost
}

type ChallengeInfo {
  _id: ID
  blendScore: Float
  challengeId: ID
  challengeName: String
  currentStreak: Float
  days: Float
  daysRemaining: Float
  endDate: String
  longestStreak: Float
  memberInfo: Member
  sharedWith: [SharedWith!]
  startDate: String
  topIngredients: [TopIngredientData!]
  totalChallengePosts: Float
  viewOnly: Boolean
}

type ChallengeInfoForId {
  challengeName: String
  memberInfo: Member
  sharedWith: [SharedWith!]
  topIngredients: [TopIngredientData!]
}

type ChallengePost {
  _id: ID
  consumedSize: Float
  docId: ID
  images: [ImageWithHash!]!
  ingredients: [IngredientData!]
  name: String
  note: String
  recipeBlendCategory: RecipeCategory!
  servingSize: Float
  servings: Float
}

type ChallengePostWithCount {
  challenge: [Challenge!]!
  totalPost: Float!
}

input CollectionInput {
  description: String
  image: String
  name: String!
  recipes: [ID!]
  slug: String
}

type CollectionType {
  _id: ID
  accepted: Boolean
  creatorInfo: Member
  description: String
  image: String
  name: String
  recipes: [ID!]
  slug: String
  totalRecipes: Float
}

type CollectionsAndTheme {
  collections: [SimpleCollection!]!
  themes: [String!]
}

type Comment {
  _id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime
  userId: Member!
}

type CompareBlendIngredientData {
  _id: ID!
  category: String
  commentsCount: Float
  featuredImage: String
  hasInCompare: Boolean
  image: String
  isPublished: Boolean
  portions: [BlendPortion!]
  publishDate: DateTime
  publishedBy: String!
  status: String
  type: String
  wikiDescription: String
  wikiTitle: String
}

type Configuiration {
  _id: ID!
  activity: String
  age: AgeType
  allergies: [String!]
  dieteryLifeStyle: String
  gender: String
  heightInCentimeters: Float
  meditcation: [String!]
  preExistingMedicalConditions: [String!]
  pregnantOrLactating: String
  weightInKilograms: Float
  whyBlending: [String!]
}

input CreatEditSpaceRoom {
  createdBy: ID
  description: String
  isActive: Boolean
  name: String
}

input CreateAdminCollection {
  children: [ID!]!
  collectionType: String!
  name: String!
}

input CreateChallengePost {
  assignDate: String!
  memberId: ID!
  post: CreateChallengePostInput!
}

input CreateChallengePostInput {
  consumedSize: Float
  images: [ImageWithHashInput!]!
  ingredients: [CreateIngredientData!]
  name: String!
  note: String
  recipeBlendCategory: ID!
  recipeImage: String
  servingSize: Float
  servings: Float
}

input CreateComment {
  comment: String!
  recipeId: ID!
  userId: ID!
}

input CreateEditAdmin {
  displayName: String
  email: String
  firstName: String
  image: String
  lastName: String
  location: String
  notes: String
  number: String
  profilePicture: String
  role: ID
  title: String
}

input CreateEditAdminCollection {
  name: String!
}

input CreateEditBanner {
  bannerName: String
  description: String
  domain: String!
  link: String
}

input CreateEditBlendIngredient {
  aliases: [String!]
  blendNutrients: [ID!]
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  defaultPortion: ID
  description: String
  featuredImage: String
  gi: Float
  gl: Float
  images: [String!]
  ingredientName: String
  ingredientType: String
  netCarbs: Float
  portions: [BlendPortionInput!]
  rxScore: Float
  varrient: ID
}

input CreateEditBlendNutrient {
  altName: String
  blendId: String
  category: ID
  isBookmarked: Boolean
  mapList: [CreateEditMap!]
  min_measure: String
  nutrientName: String
  parent: ID
  parentIsCategory: Boolean
  rank: Float
  showChildren: Boolean
  status: String
  unitName: String
  units: String
  usePriorityForMap: Boolean
}

input CreateEditBlendNutrientCategrory {
  blendId: String
  categoryName: String
  featuredImage: String
  images: [String!]
  isPublished: Boolean
  keywords: [String!]
  nutrientDescription: String
  rank: Float
  slug: String
}

input CreateEditBlogCollection {
  description: String
  image: String
  name: String
  slug: String
}

input CreateEditChallengePost {
  _id: ID!
  consumedSize: Float
  docId: ID!
  images: [ImageWithHashInput!]!
  ingredients: [CreateIngredientData!]
  name: String!
  note: String
  recipeBlendCategory: ID!
  recipeImage: String
  servingSize: Float
  servings: Float
}

input CreateEditComment {
  comment: String
}

input CreateEditConfiguration {
  activity: String
  age: Age
  allergies: [String!]
  dieteryLifeStyle: String
  gender: String
  heightInCentimeters: Float
  meditcation: [String!]
  preExistingMedicalConditions: [String!]
  pregnantOrLactating: String
  weightInKilograms: Float
  whyBlending: [String!]
}

input CreateEditDaily {
  blendNutrientRef: ID
  calorieGram: Float
  category: String
  nutrientName: String
  percentage: Float
  showPercentage: Boolean
  unitName: String
  units: String
}

input CreateEditDailyGoal {
  bmi: Float
  calories: CalorieInput
  goals: [GoalInput!]!
  memberId: ID!
}

input CreateEditGeneralBlog {
  body: String
  brand: ID
  category: String
  coverImage: String
  createdBy: ID
  description: String
  isPublished: Boolean
  keywords: [String!]
  mediaLength: Float
  mediaUrl: String
  publishDateString: String
  publisher: String!
  slug: String
  title: String
  type: String
}

input CreateEditHealthData {
  aliases: [String!]
  category: String
  class: String
  collections: [ID!]
  description: String
  featuredImage: String
  foods: [IngredientHealth!]
  healthTopic: String
  images: [String!]
  isPublished: Boolean
  nutrients: [NutrientHealth!]
  source: String
  status: String
}

input CreateEditHealthWiki {
  author: ID
  bodies: String
  isPublished: Boolean
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  wikiCoverImages: [String!]
  wikiDescription: String
  wikiFeatureImage: String
  wikiTitle: String
}

input CreateEditIngreidntAndNutrientWiki {
  author: ID
  bodies: String
  gi: Float
  isPublished: Boolean
  rxScore: Float
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  wikiCoverImages: [String!]
  wikiDescription: String
  wikiFeatureImage: String
  wikiTitle: String
}

input CreateEditMap {
  nutrientName: String!
  rank: Float!
  srcUniqueNutrientId: ID!
}

input CreateEditNewBlogComment {
  comment: String!
}

input CreateEditPlan {
  description: String
  endDateString: String
  image: ImageWithHashInput
  planData: [CreatePlanData!]
  planName: String
  startDateString: String
}

input CreateEditPlanCollection {
  description: String
  image: String
  name: String
  slug: String
}

input CreateEditPlanComment {
  comment: String!
}

input CreateEditRecipe {
  author: [String!]
  cookTime: String
  datePublished: String
  favicon: String
  foodCategories: [String!]
  image: [Image!]
  mainEntityOfPage: String
  prepTime: String
  recipeBlendCategory: String
  recipeCuisines: [String!]
  recipeYield: String
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  servings: Float
  totalTime: String
  url: String
}

input CreateEditRecipeBrand {
  brandDescription: String
  brandIcon: String
  brandImage: String
  brandName: String
  brandUrl: String
  canonicalURL: String
  isPublished: Boolean
  keywords: [String!]
  metaDesc: String
  siteMap: String
  slug: String
  title: String
}

input CreateEditRecipeCategory {
  canonicalURL: String
  description: String
  icon: String
  image: String
  isPublished: Boolean
  keywords: [String!]
  metaDesc: String
  name: String
  siteMap: String
  slug: String
  title: String
}

input CreateEditRecipeVersion {
  description: String
  errorIngredients: [ErrorIngredientInout!]
  ingredients: [CreateIngredientData!]
  postfixTitle: String
  recipeInstructions: [String!]
  selectedImage: String
  servingSize: Float
}

input CreateEditRole {
  Admin: RoleTypeInput
  All: RoleTypeInput
  Blend: RoleTypeInput
  Dashboard: RoleTypeInput
  Shop: RoleTypeInput
  Space: RoleTypeInput
  Users: RoleTypeInput
  Wiki: RoleTypeInput
  roleName: String
}

input CreateEditSpace {
  createdBy: ID
  description: String
  facilitators: [FacilitatorInput!]
  guests: [FacilitatorInput!]
  meetupSolutions: MeetupSolutionsInput
  members: [FacilitatorInput!]
  name: String
}

input CreateEditSpaceBlog {
  body: String
  category: String
  coverImage: String
  description: String
  isPublished: Boolean
  keywords: [String!]
  mediaLength: Float
  mediaUrl: String
  title: String
  type: String
}

input CreateEditTheme {
  description: String
  domain: String
  link: String
  style: String
  themeName: String
  thumbnailImage: String
  viewPorts: [String!]
}

input CreateEditUser {
  bio: String
  blenderManufacturer: String
  createdAt: DateTime
  displayName: String
  email: String
  firstName: String
  image: String
  lastName: String
  location: String
  myCart: [String!]
  orderHistoty: [String!]
  provider: String
  recentViewedProducts: [String!]
  yourBlender: String
}

input CreateEditUserChallenge {
  challengeId: ID!
  challengeName: String
  days: Float
  description: String
  endDate: String
  isActive: Boolean
  memberId: ID!
  notification: Boolean
  startDate: String
}

input CreateEditUserNote {
  body: String
  title: String
}

input CreateEditWidgetCollection {
  _id: ID!
  banner: String
  bannerId: ID
  collectionData: ID
  displayName: String
  expiryDate: String
  filter: AddFilterInput
  icon: String
  isPublished: Boolean
  orderBy: String
  publishDate: String
  publishedBy: ID
  showTabMenu: Boolean
  slug: String
  theme: String
}

input CreateEditWidgetInput {
  bannerId: ID
  slug: String
  widgetName: String
  widgetType: String
}

input CreateEditWikiComment {
  comment: String!
}

input CreateGroceryIngreidnets {
  ingredientId: ID!
  quantity: Float
  selectedPortion: String
}

input CreateIngredient {
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  description: String
  featuredImage: String
  images: [String!]
  ingredientId: String
  ingredientName: String
  nutrients: [CreateNutrientValue!]
  portions: [CreatePortion!]
  publication_date: String
  source: String
  sourceCategory: String
  sourceId: String
}

input CreateIngredientData {
  comment: String
  ingredientId: ID!
  originalIngredientName: String!
  quantityString: String!
  selectedPortionName: String!
  weightInGram: Float!
}

input CreateNewBlendNutrientCategrory {
  blendId: String!
  categoryName: String!
  featuredImage: String
  images: [String!]
  isPublished: Boolean
  keywords: [String!]
  nutrientDescription: String
  rank: Float!
  slug: String
}

input CreateNewBlogCollection {
  description: String
  memberId: ID!
  name: String!
  slug: String!
}

input CreateNewBlogComment {
  blogId: ID!
  comment: String!
  memberId: ID!
}

input CreateNewCollection {
  collection: CollectionInput!
  userId: ID!
}

input CreateNewCollectionAndShare {
  newCollectionData: CollectionInput!
  shareTo: [ShareTo!]!
  sharedBy: ID!
}

input CreateNewDaily {
  blendNutrientRef: ID!
  calorieGram: Float
  category: ID!
  nutrientName: String!
  percentage: Float
  showPercentage: Boolean
  unitName: String!
  units: String
}

input CreateNewGeneralBlog {
  body: String!
  brand: ID!
  category: String
  coverImage: String
  createdBy: ID
  description: String
  isPublished: Boolean!
  keywords: [String!]
  mediaLength: Float
  mediaUrl: String
  publishDateString: String
  publisher: String!
  slug: String!
  title: String!
  type: String
}

input CreateNewGroceries {
  ingredients: [CreateGroceryIngreidnets!]
  memberId: ID!
}

input CreateNewHealthData {
  aliases: [String!]
  category: String!
  class: String
  collections: [ID!]
  description: String
  featuredImage: String
  foods: [IngredientHealth!]
  healthTopic: String!
  images: [String!]
  isPublished: Boolean
  nutrients: [NutrientHealth!]
  source: String
  status: String
}

input CreateNewNote {
  body: String!
  recipeId: ID!
  title: String!
  userId: ID!
}

input CreateNewPantry {
  ingredients: [CreateGroceryIngreidnets!]
  isStaple: Boolean = false
  memberId: ID!
}

input CreateNewPlan {
  description: String!
  endDateString: String
  image: ImageWithHashInput
  memberId: ID!
  planData: [CreatePlanData!]!
  planName: String!
  startDateString: String
}

input CreateNewPlanCollection {
  description: String
  image: String!
  memberId: ID!
  name: String!
  slug: String!
}

input CreateNewPlanComment {
  comment: String!
  memberId: ID!
  planId: ID!
}

input CreateNewPlanRating {
  memberId: ID!
  planId: ID!
  rating: Float!
}

input CreateNewShareCollectionLink {
  collectionId: ID!
  isSharedCollection: Boolean
  shareTo: [ShareTo!]!
  sharedBy: ID!
}

input CreateNewShareLink {
  shareData: ShareData
  shareTo: [String!]!
  sharedBy: String!
}

input CreateNewSpace {
  createdBy: ID
  description: String
  facilitators: [FacilitatorInput!]
  guests: [FacilitatorInput!]
  meetupSolutions: MeetupSolutionsInput!
  members: [FacilitatorInput!]
  name: String!
}

input CreateNewSpaceArchive {
  archiveName: String!
  createdBy: ID
  icon: String
  spaceBlogs: [ID!]
  spaceId: ID!
}

input CreateNewSpaceBlog {
  archiveId: ID
  author: ID!
  body: String
  category: String
  coverImage: String
  description: String
  isPublished: Boolean
  keywords: [String!]
  mediaLength: Float
  mediaUrl: String
  spaceId: ID!
  title: String!
  type: String
}

input CreateNewSpaceRoom {
  createdBy: ID
  description: String
  isActive: Boolean
  name: String!
  spaceId: ID!
}

input CreateNutrientValue {
  category: String
  nutrient: String
  sourceId: String!
  uniqueNutrientRefference: ID!
  value: String!
}

input CreatePlanData {
  day: Float!
  recipes: [ID!]!
}

input CreatePlanner {
  assignDate: String!
  memberId: ID!
  recipe: ID!
}

input CreatePortion {
  _id: String
  default: Boolean!
  measurement: String!
  measurement2: String
  meausermentWeight: String!
  sourceId: String
}

input CreateRecipe {
  adminId: ID
  author: [String!]
  brandName: String
  collection: ID
  cookTime: String
  datePublished: String
  description: String
  errorIngredients: [ErrorIngredientInout!]
  favicon: String
  foodCategories: [String!]
  image: [Image!]
  ingredients: [CreateIngredientData!]
  mainEntityOfPage: String
  name: String!
  prepTime: String
  recipeBlendCategory: String
  recipeCuisines: [String!]
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeYield: String
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  servingSize: Float
  servings: Float
  totalTime: String
  url: String
  userId: ID
}

input CreateRecipeBrand {
  brandDescription: String
  brandIcon: String
  brandImage: String
  brandName: String!
  brandUrl: String
  canonicalURL: String
  isPublished: Boolean
  keywords: [String!]
  metaDesc: String
  siteMap: String
  slug: String
  title: String
}

input CreateRecipeCategory {
  canonicalURL: String
  description: String
  icon: String
  image: String
  isPublished: Boolean
  keywords: [String!]
  metaDesc: String
  name: String!
  siteMap: String
  slug: String!
  title: String
}

input CreateRelatedSource {
  source: String!
  sourceId: String!
  sourceNutrientName: String!
  units: String!
}

input CreateRole {
  Admin: RoleTypeInput!
  All: RoleTypeInput!
  Blend: RoleTypeInput!
  Dashboard: RoleTypeInput!
  Shop: RoleTypeInput!
  Space: RoleTypeInput!
  Users: RoleTypeInput!
  Wiki: RoleTypeInput!
  roleName: String!
}

input CreateScrappedRecipe {
  adminId: ID
  author: [String!]
  brandName: String
  cookTime: String
  datePublished: String
  description: String
  favicon: String
  foodCategories: [String!]
  image: [Image!]
  ingredients: [CreateIngredientData!]
  mainEntityOfPage: String
  name: String!
  prepTime: String
  recipeBlendCategory: String
  recipeCuisines: [String!]
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeYield: String
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  servingSize: Float
  servings: Float
  totalTime: String
  url: String
}

input CreateUniqueNutrient {
  category: String
  max: String
  min: String
  nutrient: String
  nutrientId: String
  parentNutrient: ID
  publication_date: String
  rank: Float
  related_sources: [CreateRelatedSource!]
  unitName: String
  units: String
}

input CreateUserChallenge {
  challengeName: String!
  days: Float!
  description: String
  endDate: String!
  memberId: ID!
  notification: Boolean
  startDate: String!
}

input CreateWikiComment {
  comment: String!
  entityId: ID!
  type: String!
  userId: ID!
}

type DailyWithRanges {
  _id: ID!
  blendNutrientRef: ID!
  calorieGram: Float
  category: ID!
  categoryName: String!
  nutrientName: String!
  ranges: [RangeType!]!
  showPercentage: Boolean
  unitName: String!
  units: String!
}

type DataType {
  GeneralBlog: [GeneralBlog!]
  Plan: [Plan!]
  Recipe: [Recipe!]
  Wiki: [wikiList!]
  collectionType: String
}

type DateDocPostId {
  date: String!
  docId: ID!
  postId: ID!
}

type DateStat {
  assignDate: DateTime!
  totalAmount: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DefaultPortionNutrient {
  uniqueNutrientRefference: UniqueNutrient!
  value: String!
}

input EditAdmin {
  editId: String!
  editableObject: CreateEditAdmin!
}

input EditAdminCollection {
  editId: String!
  editableObject: CreateEditAdminCollection!
}

input EditBanner {
  editId: String!
  editableObject: CreateEditBanner!
}

input EditBlendNutrientCategory {
  editId: String!
  editableObject: CreateEditBlendNutrientCategrory!
}

input EditBlendNutriet {
  editId: String!
  editableObject: CreateEditBlendNutrient!
}

input EditBlogCollection {
  editId: String!
  editableObject: CreateEditBlogCollection!
  memberId: ID!
}

input EditBlogComment {
  editId: String!
  editableObject: CreateEditNewBlogComment!
  memberId: ID!
}

input EditChallengePost {
  assignDate: String!
  memberId: ID!
  post: CreateEditChallengePost!
}

input EditCollection {
  collectionId: String!
  isSharedCollection: Boolean
  newName: String!
  userId: ID!
}

input EditComment {
  editId: ID!
  editableObject: CreateEditComment!
  recipeId: ID
  userId: ID
}

input EditConfiguration {
  editId: String!
  editableObject: CreateEditConfiguration!
}

input EditDaily {
  editId: String!
  editableObject: CreateEditDaily!
}

input EditGeneralBlog {
  editId: String!
  editableObject: CreateEditGeneralBlog!
}

input EditHealthData {
  editId: String!
  editableObject: CreateEditHealthData!
}

input EditHealthWiki {
  editId: String!
  editableObject: CreateEditHealthWiki!
}

input EditIngredient {
  editId: String!
  editableObject: CreateEditBlendIngredient!
}

input EditIngredientAndNutrientInWiki {
  editId: String!
  editableObject: CreateEditIngreidntAndNutrientWiki!
}

input EditNutrient {
  editId: String!
  editableObject: CreateUniqueNutrient!
}

input EditPlan {
  editId: String!
  editableObject: CreateEditPlan!
  memberId: String!
}

input EditPlanCollection {
  editId: String!
  editableObject: CreateEditPlanCollection!
  memberId: ID!
}

input EditPlanComment {
  editId: String!
  editableObject: CreateEditPlanComment!
  memberId: ID!
}

input EditRange {
  RDA: Boolean!
  _id: String!
  ageInMonth: Boolean!
  ageInRange: Boolean!
  ageLessThan: Float
  ageMorethan: Float
  ageRangeFrom: Float
  ageRangeTo: Float
  dailyPercentage: Boolean!
  dailyPercentageInRange: Boolean!
  dailyPercentageRangeFrom: Float
  dailyPercentageRangeTo: Float
  dailyPercentageValue: Float
  lifeStageGroup: String!
  units: String
  upperLimit: Float
  value: Float
}

input EditRecipe {
  editId: String!
  editableObject: CreateEditRecipe!
}

input EditRecipeBrand {
  editId: String!
  editableObject: CreateEditRecipeBrand!
}

input EditRecipeCategory {
  editId: String!
  editableObject: CreateEditRecipeCategory!
}

input EditRecipeVersion {
  editId: String!
  editableObject: CreateEditRecipeVersion!
  recipeId: String!
  turnedOn: Boolean
  userId: String!
}

input EditRole {
  editId: String!
  editableObject: CreateEditRole!
}

input EditSpace {
  editId: String!
  editableObject: CreateEditSpace!
}

input EditSpaceBlog {
  editId: String!
  editableObject: CreateEditSpaceBlog!
}

input EditSpaceRoom {
  editId: String!
  editableObject: CreatEditSpaceRoom!
}

input EditTheme {
  editId: String!
  editableObject: CreateEditTheme!
}

input EditUser {
  editId: String!
  editableObject: CreateEditUser!
}

input EditUserNote {
  editableObject: CreateEditUserNote!
  noteId: ID!
  recipeId: ID!
  userId: ID!
}

input EditWidget {
  editId: String!
  editableObject: CreateEditWidgetInput!
}

input EditWikiComment {
  editId: ID!
  editableObject: CreateEditWikiComment!
  userId: ID!
}

type EditedRecipe {
  isNew: Boolean!
  status: String!
}

type ErrorIngredient {
  errorString: String!
  ingredientId: ID
  qaId: ID!
}

input ErrorIngredientInout {
  errorString: String!
  ingredientId: ID
  qaId: ID!
}

type ExternalBookmark {
  entityId: GlobalBookmarkEntity!
  link: String
  type: String
}

input FacilitatorInput {
  email: String
  invitedBy: ID
  message: String!
  userId: ID
}

input FilterBlogInput {
  author: [ID!]
  collections: [ID!]
  publishers: [Publisher!]
  searchTerm: String
}

input FilterPlan {
  collectionsIds: [ID!]
  excludeIngredientIds: [ID!]
  includeIngredientIds: [ID!]
  nutrientFilters: [NutrientFilterForRecipe!]
  nutrientMatrix: [NutrientMatrix!]
  searchTerm: String
  userId: ID!
}

input FilterRecipe {
  blendTypes: [ID!]
  collectionsIds: [ID!]
  excludeIngredientIds: [ID!]
  includeIngredientIds: [ID!]
  nutrientFilters: [NutrientFilterForRecipe!]
  nutrientMatrix: [NutrientMatrix!]
  userId: ID!
}

type FilterType {
  filterType: String
  values: [FilterValue!]
}

type FilterValue {
  label: String
  value: ID
}

input FilterValueInput {
  label: String
  value: ID
}

input FilterWikiInput {
  BlendIngredientType: [BlendIngredientType!]
  excludeWikiIds: [ID!]
  healthCategory: [HealthCategoryFilter!]
  includeWikiIds: [ID!]
  nutrientCategory: [NutrientCategoryFilter!]
  nutrientFilters: [NutrientFilterForRecipe!]
  nutrientMatrix: [NutrientMatrix!]
  searchTerm: String
  wikiType: [WikiType!]
}

type GalleryImage {
  assignDate: DateTime!
  images: [String!]!
}

type GeneralBlog {
  _id: ID!
  blogCollections: [ID!]
  body: String!
  brand: Brand
  category: String
  collections: [ID!]
  commentsCount: Float
  coverImage: String
  createdAt: DateTime!
  createdBy: Admin
  description: String
  hasInCollection: Boolean
  isPublished: Boolean
  keywords: [String!]!
  mediaLength: Float
  mediaUrl: String
  publishDate: DateTime
  publishDateString: String
  publisher: String!
  slug: String!
  title: String!
  type: String!
  updatedAt: DateTime
}

type GeneralBlogCollectionWithPagination {
  blogs: [GeneralBlog!]!
  collectionInfo: BlogCollection!
  totalBlogs: Float!
}

type GeneralBlogWithPagination {
  blogs: [GeneralBlog!]!
  totalBlogs: Float!
}

input GetAllComments {
  recipeId: ID!
  userId: ID!
}

input GetAllRecipeByBlendCategory {
  blendTypes: [ID!]!
  includeIngredientIds: [ID!]
  userId: ID!
}

type GetDaily {
  bmi: ValueUnit!
  calories: ValueUnit!
  nutrients: NutrientDaily!
}

input GetIngredientsFromNutrition {
  category: String!
  nutritionID: String!
}

input GetMyNote {
  recipeId: ID!
  userId: ID!
}

type GiGl {
  netCarbs: Float
  rxScore: Float
  totalGL: Float
  totalGi: Float
}

type GlobalBookmarkEntity {
  _id: ID!
  ingredientName: String
  nutrientName: String
}

input GoalInput {
  blendNutrientId: ID!
  dri: Float!
  goal: Float
  percentage: Float
  showPercentage: Boolean!
}

input GramConversion {
  amount: Float!
  unit: String!
}

type Grocery {
  ingredientId: GroceryIngredientType
  quantity: Float
  selectedPortion: String
}

type GroceryIngredientType {
  _id: ID!
  featuredImage: String
  ingredientName: String
  portions: [BlendPortion!]
}

type GuestFacilitator {
  email: String!
  invitedBy: Admin
  message: String!
}

"""The types"""
enum HealthCategoryFilter {
  CANCERS
  CARDIOVASCULAR_DISEASES
  DIGESTIVE_DISORDERS
  EYE_AND_EAR_CONDITIONS
  HORMONAL_AND_METABOLIC
  INFECTIOUS_DISEASES
  INFLAMMATORY_AND_AUTOIMMUNE
  MENTAL_AND_BEHAVIORAL
  MUSCULOSKELETAL_DISORDERS
  NEUROLOGICAL_DISORDERS
  OTHER_CONDITIONS
  REPRODUCTIVE_AND_URINARY
  RESPIRATORY_DISEASES
  SKIN_CONDITIONS
  TESTCATEGORY
}

type HealthData {
  _id: ID!
  aliases: [String!]
  category: String!
  class: String
  collections: [ID!]
  createdAt: DateTime
  description: String
  featuredImage: String
  foodCount: Float
  foods: [IngredientHealthType!]
  healthTopic: String!
  imageCount: Float
  images: [String!]
  isPublished: Boolean
  nutrientCount: Float
  nutrients: [NutrientHealthType!]
  source: String
  status: String
}

input HealthFilter {
  healthCategory: String!
  healthClass: Float!
}

type HealthImpact {
  healthId: ID!
  healthTopic: String!
  score: Float!
}

type HealthWiki {
  _id: ID!
  author: Admin
  bodies: String
  category: String
  commentsCount: Float
  foods: [IngredientHealthType!]
  isPublished: Boolean
  nutrientBookmarkList: [Bookmark!]
  nutrients: [NutrientHealthType!]
  publishedBy: String
  relatedWikis: WikiListWithPagination!
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  type: String
  wikiCoverImages: [String!]
  wikiDescription: String
  wikiFeatureImage: String
  wikiTitle: String
}

type Hello {
  count: Float
  recipes: [ID!]
  userId: ID
}

input Image {
  default: Boolean!
  image: String!
}

type ImageType {
  default: Boolean!
  image: String!
}

type ImageWithHash {
  hash: String
  url: String
}

input ImageWithHashInput {
  hash: String!
  url: String!
}

type Ingredient {
  _id: ID!
  addedToBlend: Boolean
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  description: String
  featuredImage: String
  images: [String!]
  ingredientId: String
  ingredientName: String
  ingredientType: String
  nutrients: [NutrientValue!]
  portions: [Portion!]
  publication_date: String
  source: String
  sourceCategory: String
  sourceId: String
}

type IngredientData {
  comment: String
  ingredientId: BlendIngredientData!
  originalIngredientName: String
  portions: [ReturnPortion!]
  quantityString: String
  selectedPortion: SelectedPortion
  weightInGram: Float
}

input IngredientFilter {
  IngredientClass: Float!
  ingredientCategory: String!
}

type IngredientForWiki {
  ingredientId: ID!
  name: String!
  portion: Portion!
  units: String!
  value: Float!
}

type IngredientFromNutrition {
  _id: ID!
  author: Admin
  bodies: String
  category: String
  commentsCount: Float
  healthImpacts: [HealthImpact!]
  ingredients: [IngredientForWiki!]
  isPublished: Boolean
  nutrientBookmarkList: [Bookmark!]
  publishedBy: String
  relatedWikis: WikiListWithPagination!
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  type: String
  wikiCoverImages: [String!]
  wikiDescription: String
  wikiFeatureImage: String
  wikiTitle: String
}

input IngredientHealth {
  ingredientId: ID!
  score: Float!
}

type IngredientHealthType {
  foodId: BlendIngredientData!
  score: Float!
}

input IngredientInfo {
  ingredientId: String!
  value: Float!
}

type IngredientStats {
  _id: DateTime!
  consumptionInGram: Float!
  endDate: DateTime
}

type IngredientStatsForNutrient {
  _id: ID!
  defaultPortion: BlendPortion!
  ingredientName: String!
  totalAmount: Float!
  units: String!
}

type IngredientStatsWithPortion {
  category: String!
  otherIngredients: [OtherIngredientStats!]!
  portion: BlendPortion!
  stats: [IngredientStats!]!
}

type IngredientWikiLink {
  _id: ID!
  ingredientName: String
  portions: [BlendPortion!]
  wikiTitle: String
}

type InviteInfoSharedWithAndTopIngredients {
  hasAccepted: Boolean
  hasInvited: Boolean
  invite: inviteInfo!
  isOwner: Boolean
  sharedWith: [SharedWith!]
  topIngredients: [TopIngredientData!]
}

type MacroMakeup {
  carbs: Float!
  fats: Float!
  protein: Float!
}

type MainRecipesWithPagination {
  recipes: [SimpleRecipe!]
  totalRecipes: Float!
}

"""The basic directions"""
enum MatrixName {
  calorie
  gi
  gl
  netCarbs
}

type MeetupSolutions {
  broadCast: Boolean!
  meet: Boolean!
  meetings: Boolean!
  webinars: Boolean!
}

input MeetupSolutionsInput {
  broadCast: Boolean!
  meet: Boolean!
  meetings: Boolean!
  webinars: Boolean!
}

type Member {
  _id: ID
  bio: String
  blenderManufacturer: String
  collections: [CollectionType!]
  compareLength: Float
  compareList: [ID!]
  configuration: Configuiration
  createdAt: DateTime!
  displayName: String
  email: String
  facilitatorsAccess: [String!]
  firstName: String
  image: String
  isCreated: Boolean
  lastModifiedCollection: ID!
  lastName: String
  location: String
  myCart: [String!]
  orderHistoty: [String!]
  phone: String
  provider: String!
  recentViewedProducts: [String!]
  wikiCompareCount: Float
  yourBlender: String
}

type MemberFacilitator {
  email: String
  invitedBy: Admin
  message: String!
  userId: Member
}

type MemberProfileForRecipe {
  _id: ID!
  displayName: String
  email: String
  firstName: String
  image: String
  lastName: String
}

input MovePlanner {
  assignDate: String!
  plannerId: ID!
  recipeId: ID!
}

type Mutation {
  EditADaily(data: EditDaily!): String!
  EditIngredient(data: EditIngredient!): String!
  EditSrcIngredient(data: EditIngredient!): String!
  acceptChallenge(inviteId: String!, memberId: String!): String!
  acceptRecipeShare(token: String!, userId: String!): ShareNotificationsWithCount!
  acceptShareCollection(token: String!, userId: String!): ShareNotificationsWithCount!
  activateChallenge(challengeId: String!, memberId: String!, previousDefaultChallengeId: String): String!
  addARecipeToACollection(data: AddToLastModifiedCollectionInput!): CollectionType!
  addAdminToRole: String!
  addBulkScrappedRecipeFromUser(data: [CreateScrappedRecipe!]!): String!
  addGeneralBlog(data: CreateNewGeneralBlog!): GeneralBlog!
  addGiToTheIngredients: String!
  addGroceryByPlanId(memberId: String!, planId: String!): String!
  addGroceryList(data: CreateNewGroceries!): String!
  addMacroInfo: [Hello!]!
  addNewAdminCollection(data: CreateAdminCollection!): AdminCollection!
  addNewBlendIngredient(data: AddNewBlendIngredient!): String!
  addNewBlendIngredientFromSrc(srcId: String!): ReturnBlendIngredientData!
  addNewBlendIngredientWithQAId(blendIngredient: AddNewBlendIngredient!, qaId: String!): QASimpleIngredientAndPercentage!
  addNewBlendNutrient(data: AddNewBlendNutrient!): String!
  addNewBlendNutrientCategory(data: CreateNewBlendNutrientCategrory!): String!
  addNewBlendNutrientFromSrc(data: AddNewBlendNutrientFromSrc!): String!
  addNewBlogCollection(data: CreateNewBlogCollection!): BlogCollection!
  addNewBlogToSpaceArchive(archiveId: String!, spaceBlogId: String!): String!
  addNewCollectionWithData(data: CreateNewCollection!): CollectionType!
  addNewHealthData(addNewHealthData: CreateNewHealthData!): HealthData!
  addNewPlanCollection(data: CreateNewPlanCollection!): PlanCollection!
  addNewWidget(data: AddWidgetInput!): String!
  addNewWidgetCollection(widgetCollection: WidgetCollection!, widgetId: String!): SingleWidgetCollecType!
  addOrRemoveBlogsToASpaceArchive(archiveId: String!, spaceBlogIds: [String!]!): String!
  addOrRemovePlanCollection(collectionIds: [String!]!, memberId: String!, planId: String!): PlanCollectionsWithDefaultCollection!
  addOrRemoveRecipeFromCollection(data: AddOrRemoveRecipeFromCollectionInput!): [CollectionType!]!
  addOrRemoveToBlogCollection(blogId: String!, collectionIds: [String!]!, memberId: String!): BlogCollectionsWithDefaultCollection!
  addOrRemoveToWikiCompareList(ingredientId: String!, userId: String!): String!
  addPantryList(data: CreateNewPantry!): String!
  addRandomIngredientAndHealthValue: String!
  addRangeToDaily(dailyId: String!, range: Range!): String!
  addRecipeFromAdmin(data: CreateRecipe!): String!
  addRecipeFromUser(data: CreateRecipe!, isAddToTemporaryCompareList: Boolean!): ProfileRecipeDesc!
  addRecipeToAUserCollection(data: AddCRecipeTOAUserCollectionInput!): [CollectionType!]!
  addThemeChannel(description: String!, name: String!): String!
  addToGroceryFromPlanner(memberId: String!, recipeId: String!): String!
  addToLastModifiedBlogCollection(blogId: String!, memberId: String!): BlogCollection!
  addToLastModifiedPlanCollection(memberId: String!, planId: String!): PlanCollection!
  addToQABestMatches(ingredientId: String!, isBlend: Boolean!, qaId: String!): QASimpleIngredientAndPercentage!
  addTolastModifiedCollection(data: AddToLastModifiedCollectionInput!): CollectionType!
  addVersion(data: AddVersion!): RecipeVersion!
  bringAllAdminRecipe: String!
  changeBlendNutrients: String!
  changeBlendNutrients23: String!
  changeCollection: String!
  changeCompare(recipeId: String!, userId: String!): Float!
  changeDefaultVersion(isTurnedOff: Boolean, recipeId: String!, userId: String!, versionID: String!): ProfileRecipeDesc!
  changeGIandGetGL(GI: Float!, ingredientId: String!): GiGl!
  changeRecipeRating(Rating: Float!, recipeId: String!, userId: String!): ReturnRatingInfo!
  changeWaterValue: String!
  changeWikiCompareList(ingredients: [String!]!, userId: String!): String!
  checkParsing(recipeIngredients: [String!]): String!
  clearPlannerByDates(endDate: String!, startDate: String!, userId: String!): String!
  copyAChallengePost(assignDate: String!, docId: String!, memberId: String!, postId: String!): String!
  createAPlan(input: CreateNewPlan!): String!
  createBlogComment(data: CreateNewBlogComment!): BlogComment!
  createBookMark: String!
  createBookMark2: String!
  createBrand(data: CreateRecipeBrand!): String!
  createChallengePost(data: CreateChallengePost!): ChallengeAndSingleChallengeDoc!
  createCollectionAndShare(data: CreateNewCollectionAndShare!): String!
  createComment(data: CreateComment!): RecipeComments!
  createNewAdmin(data: NewAdminInput!): Admin!
  createNewBanner(data: BannerInput!): String!
  createNewCollection(data: CreateNewCollection!): CollectionType!
  createNewDaily(data: CreateNewDaily!): String!
  createNewIngredient(data: CreateIngredient!): Ingredient!
  createNewNote(data: CreateNewNote!): [UserNote!]!
  createNewRole(data: CreateRole!): Role!
  createNewSpace(spaceData: CreateNewSpace!): String!
  createNewSpaceArchive(spaceArchiveData: CreateNewSpaceArchive!): SimpleSpaceArchive!
  createNewSpaceBlog(spaceBlogData: CreateNewSpaceBlog!): SpaceBlog!
  createNewSpaceRoom(spaceRoomData: CreateNewSpaceRoom!): SimpleSpaceRoom!
  createNewTheme(data: ThemeInput!): String!
  createNewUser(data: NewUserInput!): Member!
  createNewUserRecipeWithCollection(data: NewUserRecipeInput!): String!
  createPlanComment(data: CreateNewPlanComment!): PlanComment!
  createPlanner(data: CreatePlanner!): Planner!
  createRecipeCategory(data: CreateRecipeCategory!): String!
  createShareCollectionLink(data: CreateNewShareCollectionLink!): String!
  createShareLink(data: CreateNewShareLink!): String!
  createUserChallenge(data: CreateUserChallenge!): UserChallenge!
  createWikiComment(data: CreateWikiComment!): PopulatedWikiComment!
  deleteAChallengePost(docId: String!, postId: String!): DateDocPostId!
  deleteAGeneralBlog(blogId: ID!): String!
  deleteARecipe(recipeId: String!, userId: String!): String!
  deleteARecipeBrand(brandId: String!): String!
  deleteBlendNutrientCategory(id: String!): String!
  deleteBlogCollection(collectionId: String!, memberId: String!): BlogCollectionsWithDefaultCollection!
  deleteCollection(data: RemoveACollectionInput!): [CollectionType!]!
  deleteHealthData(healthId: String!): String!
  deletePlan(memberId: String!, planId: String!): String!
  deletePlanCollection(collectionId: String!, memberId: String!): PlanCollectionsWithDefaultCollection!
  deletePlanner(plannerId: String!, recipeId: String!): String!
  deleteRecipeCategory(recipeCategoryId: String!): String!
  deleteSomeFromList(groceryIngredients: [ID!]!, memberId: String!, pantryIngredients: [ID!]!, stapleIngredients: [ID!]!): String!
  deleteSpaceArchive(archiveId: String!): String!
  deleteSpaceBlog(spaceBlogId: ID!): String!
  deleteSpaceRoom(spaceRoomId: ID!): String!
  deleteUserChallenge(challengeId: String!): String!
  editABanner(data: EditBanner!): String!
  editABlogCollection(data: EditBlogCollection!): BlogCollection!
  editAChallengePost(data: EditChallengePost!): ChallengeAndSingleChallengeDoc!
  editACollection(data: EditCollection!): String!
  editAGeneralBlog(data: EditGeneralBlog!): String!
  editAListItem(ingredient: CreateGroceryIngreidnets!, listType: String!, memberId: String!): String!
  editAPlanCollection(data: EditPlanCollection!): PlanCollection!
  editARange(dailyId: String!, data: EditRange!): String!
  editARecipe(data: EditRecipe!, userId: String!): String!
  editARecipeBrand(data: EditRecipeBrand!): String!
  editASpace(data: EditSpace!): Space!
  editASpaceBlog(EditSpaceBlog: EditSpaceBlog!): String!
  editASpaceRoom(EditSpaceRoom: EditSpaceRoom!): String!
  editATheme(data: EditTheme!): String!
  editAVersionOfRecipe(data: EditRecipeVersion!): EditedRecipe!
  editAWidget(data: EditWidget!): String!
  editAWidgetCollection(widgetCollection: CreateEditWidgetCollection!, widgetId: String!): SingleWidgetCollecType!
  editAdmin(data: EditAdmin!): String!
  editAdminCollectionByID(data: EditAdminCollection!): AdminCollection!
  editBlendNutrient(data: EditBlendNutriet!): String!
  editBlogComment(data: EditBlogComment!): BlogComment!
  editChildrenInCollection(data: editChildrenInCollection!): AdminCollection!
  editComment(data: EditComment!): RecipeComments!
  editConfigurationById(data: EditConfiguration!): String!
  editHealthData(EditHealthData: EditHealthData!): String!
  editHealthWiki(data: EditHealthWiki!): String!
  editIngredientWiki(data: EditIngredientAndNutrientInWiki!): String!
  editIngredientWiki2(data: EditIngredientAndNutrientInWiki!): String!
  editMyNote(data: EditUserNote!): [UserNote!]!
  editNutrientWiki(data: EditIngredientAndNutrientInWiki!): String!
  editNutrientWiki2(data: EditIngredientAndNutrientInWiki!): String!
  editPlanComment(data: EditPlanComment!): PlanComment!
  editRole(data: EditRole!): String!
  editSpaceArchiveNameOrIcon(archiveId: String!, archiveName: String, icon: String): SimpleSpaceArchive!
  editUniqueNutrient(data: EditNutrient!): String!
  editUserByEmail(data: EditUser!): String!
  editUserById(data: EditUser!): String!
  editUserChallenge(data: CreateEditUserChallenge!): UserChallenge!
  editWikiComment(data: EditWikiComment!): PopulatedWikiComment!
  emptyCompareList(userId: String!): String!
  emptyWikiCompareList(userId: String!): String!
  fixV: String!
  getA: String!
  importDataFromCSV: String!
  ingredientDesToName: String!
  inviteToChallenge(canInviteWithOthers: Boolean!, challengeId: String!, currentDate: String, invitedBy: String!, invitedWith: [String!]!): String!
  janoyar: String!
  joinASpace(spaceId: ID!, userId: ID!): String!
  juio: Boolean!
  makeOtherIngredientWiki: String!
  makeSomeGlobalRecipes: Boolean!
  makeWikis: String!
  manipulateBookMarks(bookmarkId: String, customBookmarkName: String, link: String!, removeCustomBookmark: Boolean, type: String!, wikiId: String!): BookmarkAndExternalGlobalLInk!
  manipulateBookMarksForBlog(blogId: String!, customBookmarkName: String!, link: String!, removeCustomBookmark: Boolean): BlogBookmarkAndExternalGlobalLInk!
  manipulatePortionsToBlendIngredient(blendIngredientId: String!, blendPortions: [BlendPortionInput!]!): String!
  manus: Float!
  mergeOrReplacePlanner(endDate: String, memberId: String!, mergeOrReplace: mergerOrRemove!, planId: String!, startDate: String!): String!
  moveAChallengePost(assignDate: String!, docId: String!, memberId: String!, postId: String!): String!
  movePlanner(data: MovePlanner!): Planner!
  n: String!
  orderingRecipeBrand(data: [String!]!): String!
  orderingRecipeCategory(data: [String!]!): String!
  rejectChallengeInvite(inviteId: String!, memberId: String!): ShareNotificationsWithCount!
  rejectRecipeShare(token: String!, userId: String!): ShareNotificationsWithCount!
  rejectShareCollection(token: String!, userId: String!): ShareNotificationsWithCount!
  removeABanner(bannerId: String!): String!
  removeABlendIngredient(id: String!): String!
  removeABlogComment(commentId: String!, memberId: String!): String!
  removeADaily(dailyId: String!): String!
  removeAPlanComment(commentId: String!, memberId: String!): Float!
  removeARangeFromDaily(dailyId: String!, rangeId: String!): String!
  removeARecipeVersion(isTurnedOn: Boolean!, recipeId: String!, userId: String!, versionId: String!): String!
  removeATheme(themeId: String!): String!
  removeAUserById(userId: String!): String!
  removeAUserByemail(email: String!): String!
  removeAWidget(widgetId: String!): String!
  removeAWidgetCollection(widgetCollectionId: String!, widgetId: String!): String!
  removeAWikiComment(commentId: String!, userId: String!): String!
  removeAconfiguirationById(configuirationId: String!): String!
  removeAdmin(email: String!): String!
  removeAdminCollection(collectionId: String!): String!
  removeAllAddedByAdminRecipe: String!
  removeAllBanners: String!
  removeAllBulkRecipe: String!
  removeAllGroceryList: String!
  removeAllQA: String!
  removeAllShare: String!
  removeAllThemes: String!
  removeAllVersion: String!
  removeBlendIngredientFromSrc(id: String!): String!
  removeBlendNutrient(id: String!): String!
  removeComment(data: RemoveCommentInput!): RecipeComments!
  removeFromQABestMatches(ingredientId: String!, isBlend: Boolean!, qaId: String!): String!
  removeFromWikiCompareList(ingredientId: String!, userId: String!): String!
  removeIngredient(ingredientId: String!): String!
  removeMyNote(data: RemoveNote!): [UserNote!]!
  removeRecipeFromAColection(data: AddCRecipeTOAUserCollectionInput!): [CollectionType!]!
  removeRole(roleId: String!): String!
  resetApplication: String!
  resetNutrientAndFoodForHealth: String!
  saveScrappedRecipe(data: CreateScrappedRecipe!): String!
  searchInScrappedRecipeFromUser(isClient: Boolean, recipeIngredients: [String!], url: String, userId: String): NutrientsWithGiGlForScrapper!
  selectIngredientForAnQa(ingredientId: String!, isBlend: Boolean!, qaId: String!): QAForAdmin!
  setOrder: String!
  setOrderBrand: String!
  shareGlobalChallenge(challengeId: String!, memberId: String!): String!
  shareGlobalCollection(collectionId: ID!, sharedBy: ID!): String!
  sharePlan(memberId: String!, planId: String!): String!
  showChildren: String!
  temo: String!
  tempEditRecipeByAdmin(data: CreateRecipe!): String!
  temporaryRecipeCategoryUpdate(blendCategory: String!, recipeId: String!): String!
  turnedOnOrOffVersion(isDefault: Boolean, recipeId: String!, turnedOn: Boolean!, userId: String!, versionId: String!): String!
  updateAPlan(input: EditPlan!): String!
  updateAllHealthData: String!
  updateBlendNutrientCategory(data: EditBlendNutrientCategory!): String!
  updateDailyGoals(data: CreateEditDailyGoal!): String!
  updateNotBlendIngredientData: String!
  updatePlanRating(data: CreateNewPlanRating!): ReturnRatingInfo!
  updateRecipeCategory(data: EditRecipeCategory!): String!
  updateSrcIngredient(page: Float!): String!
  useABookmark(bookmarkId: String!, use: Boolean!): String!
  xxxx12: String!
  yyyy: Float!
}

type MyShareData {
  _id: ID
  entityId: ShareRecipe
}

input NewAdminInput {
  displayName: String
  email: String!
  firstName: String
  image: String
  lastName: String
  location: String
  notes: String
  number: String
  profilePicture: String
  role: ID
  title: String
}

input NewUserInput {
  email: String!
  provider: String
}

input NewUserRecipeInput {
  collectionId: ID
  recipe: CreateRecipe!
  userEmail: String!
}

"""The types"""
enum NutrientCategoryFilter {
  CALORIE
  MACRO_NUTRIENTS
  MICRO_NUTRIENTS
  MINERAL
  VITAMIN
}

type NutrientDaily {
  Energy: [NutrientDailyDescription!]!
  Minerals: [NutrientDailyDescription!]!
  Vitamins: [NutrientDailyDescription!]!
}

type NutrientDailyDescription {
  blendNutrientRef: ID
  calorieGram: Float
  data: ValueUnit!
  nutrientName: String!
  percentage: Float
  showPercentage: Boolean
}

input NutrientFilterForRecipe {
  between: Boolean!
  category: category!
  greaterThan: Boolean!
  lessThan: Boolean!
  nutrientId: ID!
  value: Float!
  value1: Float
  value2: Float
}

input NutrientHealth {
  nutrientId: ID!
  score: Float!
}

type NutrientHealthType {
  nutrientId: BlendNutrientData!
  score: Float!
}

input NutrientMatrix {
  between: Boolean!
  greaterThan: Boolean!
  lessThan: Boolean!
  matrixName: MatrixName!
  value: Float!
  value1: Float
  value2: Float
}

type NutrientValue {
  blendData: BlendNutrientData
  sourceId: String!
  uniqueNutrientRefference: UniqueNutrient!
  value: String!
}

type NutrientWikiLink {
  _id: ID!
  nutrientName: String
  wikiTitle: String
}

type NutrientsWithGiGl {
  giGl: GiGl
  notFoundIndexes: [Float!]
  nutrients: String!
}

type NutrientsWithGiGlForScrapper {
  blendIngredients: [Processed!]
  collections: [String!]!
  errorIngredients: [ErrorIngredient!]
  giGl: GiGl
  isAlreadyInCompared: Boolean!
  notFoundIndexes: [Float!]
  nutrients: [nutrientForScrapper!]!
  recipeId: String
}

type NutritionFromIngredient {
  author: Admin
  bodies: String
  category: String
  commentsCount: Float
  hasInCompare: Float
  healthImpacts: [HealthImpact!]
  ingredientBookmarkList: [Bookmark!]
  isPublished: Boolean
  portions: [BlendPortion!]
  publishedBy: String
  relatedWikis: WikiListWithPagination!
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  type: String
  wikiCoverImages: [String!]
  wikiDescription: String
  wikiFeatureImage: String
  wikiTitle: String
}

type OtherIngredientStats {
  _id: ID!
  consumptionInGram: Float!
  name: String!
  portion: BlendPortion!
}

type Plan {
  _id: ID
  averageRating: Float
  calorie: CalorieInfo
  collections: [ID!]
  commentsCount: Float
  createdAt: String
  description: String!
  endDateString: String
  gigl: GiGl
  image: ImageWithHash
  isGlobal: Boolean
  memberId: ID!
  myRating: Float
  numberOfRating: Float
  planCollections: [ID!]
  planCollectionsDescription: [PlanCollection!]
  planData: [PlanData!]!
  planName: String!
  startDateString: String
  totalRating: Float
  totalViews: Float
  updatedAt: String
}

type PlanAndRecipes {
  invitedBy: Member
  plan: Plan!
  recipeCount: Float
  recipes: [Recipe!]
}

type PlanCollection {
  _id: ID!
  collectionDataCount: Float!
  createdAt: DateTime!
  description: String!
  image: String
  memberId: ID!
  name: String!
  plans: [ID!]!
  slug: String!
  updatedAt: DateTime
}

type PlanCollectionsWithDefaultCollection {
  defaultCollection: PlanCollection
  planCollections: [PlanCollection!]!
}

type PlanComment {
  _id: ID!
  comment: String!
  commentsCount: Float
  createdAt: DateTime!
  memberId: Member!
  planId: ID!
  updatedAt: DateTime
}

type PlanData {
  _id: ID!
  day: Float
  recipes: [Recipe!]
}

type PlanIngredientAndCategory {
  macroMakeup: MacroMakeup!
  plan: Plan!
  recipeCategoriesPercentage: [CategoryPercentage!]
  topIngredients: [TopIngredientData!]
}

type Planner {
  _id: ID!
  createdAt: DateTime!
  formatedDate: String
  memberId: ID!
  recipes: [ID!]!
  updatedAt: DateTime
}

type PlannerInsights {
  calorie: Float
  macroMakeup: MacroMakeup
  netCarbs: Float
  recipeCategoriesPercentage: [CategoryPercentage!]
  rxScore: Float
  topIngredients: [TopIngredientData!]
}

type PlannerRecipe {
  recipes: [ProfileRecipe!]
  totalRecipe: Float!
}

type PlannerWithRecipes {
  ProfileRecipes: [ProfileRecipe!]!
  _id: ID
  createdAt: DateTime
  formatedDate: String!
  memberId: ID
  updatedAt: DateTime
}

type PlannersIngredientAndCategory {
  calorie: Float
  macroMakeup: MacroMakeup
  netCarbs: Float
  planners: [PlannerWithRecipes!]!
  recipeCategoriesPercentage: [CategoryPercentage!]
  rxScore: Float
  topIngredients: [TopIngredientData!]
}

type PlansWithTotal {
  plans: [Plan!]!
  totalPlans: Float
}

type PopulatedAdmin {
  _id: ID!
  createdAt: DateTime!
  displayName: String
  email: String!
  firstName: String
  image: String
  lastName: String
  location: String
  notes: String
  number: String
  profilePicture: String
  role: Role
  title: String
}

type PopulatedDaily {
  _id: ID!
  blendNutrientRef: BlendNutrientData!
  category: ID!
  categoryName: String!
  nutrientName: String!
  units: String!
}

type PopulatedSpaceArchive {
  _id: ID!
  archiveName: String!
  blogsCount: Float!
  createdBy: Member
  icon: String
  spaceBlogs: [SpaceBlog!]
  spaceId: Space!
}

type PopulatedWikiComment {
  _id: ID!
  comment: String!
  createdAt: DateTime!
  entityId: ID!
  type: String!
  updatedAt: DateTime
  userId: Member!
}

type Portion {
  _id: String
  default: Boolean!
  measurement: String!
  measurement2: String
  meausermentWeight: String!
  sourceId: String
}

type PrevPost {
  postId: ID
  prevPostDate: String!
}

type Processed {
  comment: String
  db_name: String
  featuredImage: String
  ingredientId: ID!
  name: String
  originalIngredientName: String
  quantity: Float
  quantityString: String
  selectedPortionName: String
  userIngredient: String
  weightInGram: Float
}

type ProfileRecipe {
  _id: String!
  addedToCompare: Boolean
  allRecipes: Boolean
  defaultVersion: RecipeVersion
  isMatch: Boolean
  isTemp: Boolean
  myRecipes: Boolean
  notes: Float
  personalRating: Float
  recipeId: SimpleRecipe
  tags: [String!]
  userCollections: [ID!]
  versionCount: Float
}

type ProfileRecipeDesc {
  addedToCompare: Boolean
  allRecipes: Boolean
  defaultVersion: RecipeVersion
  isMatch: Boolean
  myRecipes: Boolean
  notes: Float
  personalRating: Float
  recipeId: Recipe2
  sharedBy: ShareBy
  tags: [String!]
  turnedOffVersions: [RecipeVersion!]
  turnedOnVersions: [RecipeVersion!]
  userCollections: [ID!]
  versionsCount: Float
}

input Publisher {
  categories: [String!]!
  publisher: String!
}

type QAAdminWithPagination {
  QAData: [QAForAdmin!]!
  totalData: Float!
}

type QAForAdmin {
  _id: ID!
  action: String!
  bestMatch: QASimpleIngredient
  bestMatchCounts: Float!
  comment: String!
  errorParsed: Boolean!
  issues: [String!]!
  matchedIngredients: [QASimpleIngredientAndPercentage!]!
  name: String!
  quantity: Float
  status: String!
  unit: String
  userIngredient: String!
  versions: [ID!]!
}

type QASimpleIngredient {
  _id: ID!
  ingredientName: String
}

type QASimpleIngredientAndPercentage {
  ingredientId: QASimpleIngredient!
  onModel: String!
  percentage: Float
}

type Query {
  CheckScrappedRecipeFromUser(url: String!): Boolean!
  SearchIngredients(searchTerm: String!): [Ingredient!]!
  averageCarbsProteinFatsForAPlanner(planId: String!): String!
  bmiCalculation(heightInCM: Float!, weightInKG: Float!): Float!
  bodyTeswwt: String!
  checkForRecipeExistenceInCollection(data: AddExistingRecipeInput!): Boolean!
  convertGramToUnit(data: GramConversion!): Float!
  convertToGram(data: GramConversion!): Float!
  databaseShifting: String!
  emptyCollections(collectionType: String!): String!
  filterBlog(currentDate: String!, data: FilterBlogInput!, limit: Float, memberId: String!, page: Float): GeneralBlogWithPagination!
  filterCollectionRecipe(data: FilterRecipe!, limit: Float, page: Float): RecipesWithPagination!
  filterHealthByCategoryAndClassForWiki(data: HealthFilter!): [SimpleHealthData!]!
  filterIngredientByCategoryAndClass(data: IngredientFilter!): [BlendIngredientData!]!
  filterIngredientByCategoryAndClassForWiki(data: IngredientFilter!): [BlendIngredientData!]!
  filterPlans(data: FilterPlan!, limit: Float, page: Float, userId: String!): PlansWithTotal!
  filterRecipe(data: FilterRecipe!, limit: Float, page: Float, userId: String!): RecipesWithPagination!
  filterRecipeForAdmin(data: FilterRecipe!, limit: Float, page: Float): MainRecipesWithPagination!
  filterWiki(data: FilterWikiInput!, limit: Float, page: Float, userId: String!): WikiListWithPagination!
  fixPlans: String!
  fixedDays: String!
  getAChallengeGallery(memberId: String!): [GalleryImage!]!
  getAHealthWiki(userId: String, wikiHealthId: ID!): HealthWiki!
  getALlUniqueNutrientList: [UniqueNutrient!]!
  getAPlan(memberId: String, planId: String!, token: String): PlanIngredientAndCategory!
  getAPlan2(memberId: String, planId: String!, token: String): PlanIngredientAndCategory!
  getARecipe(recipeId: String, token: String, userId: String!): Recipe!
  getARecipe2(recipeId: String, token: String, userId: String): ProfileRecipeDesc!
  getARecipeForAdmin(recipeId: String!): SimpleRecipe!
  getARecipeVersion(versionId: String!): RecipeVersion!
  getASingleAdmin(adminId: String!): Admin!
  getASingleBanner(bannerId: String!): Banner!
  getASingleBlendNutrient(id: String!): BlendNutrientData!
  getASingleBlendNutrientCategory(id: String!): BlendNutrientCategory!
  getASingleBrand(brandId: String!): Brand!
  getASingleCategory(recipeCategoryName: String!): RecipeCategory!
  getASingleCofiguiration(configuirationId: String!): Configuiration!
  getASingleCollection(collectionId: String, limit: Float, page: Float, singleRecipeCollectionId: String, slug: String!, token: String, userId: String!): CollectionType!
  getASingleDaily(dailyId: String!): DailyWithRanges!
  getASingleHealthData(healthId: String!): HealthData!
  getASingleIngredient(ingredientId: String!): Ingredient!
  getASingleRange(dailyId: String!, rangeId: String!): RangeType!
  getASingleRole(roleId: String!): String!
  getASingleTheme(themeId: String!): Theme!
  getASingleUserByEmail(email: String!): Member!
  getASingleUserById(id: String!): Member!
  getASingleWidget(widgetId: String!): WidgetType!
  getASingleWidgetCollection(widgetCollectionId: String!, widgetId: String!): WidgetCollecType!
  getASpaceArchiveById(spaceArchiveId: ID!): PopulatedSpaceArchive!
  getASpaceBlogById(spaceBlogId: ID!): SpaceBlog!
  getAUniqueNutrient(nutrientId: String!): UniqueNutrient!
  getAgeneralBlog(blogId: ID!, currentDate: String!): GeneralBlog!
  getAgeneralBlogBySlug(memberId: ID, slug: String!): GeneralBlog!
  getAllAdmin: [PopulatedAdmin!]!
  getAllAdminCollection(collectionType: String!): [AdminCollection!]!
  getAllAdminCollectionType: [String!]!
  getAllBanners(domain: String): [Banner!]!
  getAllBlendIngredients: [ReturnBlendIngredientData!]!
  getAllBlendNutrientCategories: [BlendNutrientCategory!]!
  getAllBlendNutrients: [BlendNutrientData!]!
  getAllBlendNutrientsForWiki: [BlendNutrientData!]!
  getAllBlogCollections(memberId: String!): BlogCollectionsWithDefaultCollection!
  getAllBlogsForACollection(limit: Float, memberId: String!, page: Float, slug: String!): GeneralBlogCollectionWithPagination!
  getAllBrands: [Brand!]!
  getAllCategories: [RecipeCategory!]!
  getAllChallengePostByDate(date: DateTime!, memberId: String!): [ChallengePost!]!
  getAllClassOneIngredients: [ReturnBlendIngredientData!]!
  getAllCollectionsWithRecipes(userId: String!): [ShowAllCollection!]!
  getAllCommentsForABlog(blogId: String!): [BlogComment!]!
  getAllCommentsForAPlan(planId: String!): [PlanComment!]!
  getAllCommentsForARecipe(data: GetAllComments!): RecipeComments!
  getAllConfiguirations: [Configuiration!]!
  getAllDailys: [PopulatedDaily!]!
  getAllGeneralBlog(brand: String, category: String, currentDate: String!, withPublished: Boolean): [GeneralBlog!]!
  getAllGeneralBlogForClient(categories: [String!], currentDate: String!, limit: Float, memberId: String!, page: Float): GeneralBlogWithPagination!
  getAllGlobalPlans(limit: Float, memberId: String, page: Float, searchTerm: String!): PlansWithTotal!
  getAllHealthData(limit: Float, page: Float): [SimpleHealthData!]!
  getAllIngredientsBasedOnNutrition2(data: GetIngredientsFromNutrition!, userId: String!): IngredientFromNutrition!
  getAllIngredientsDataBasedOnNutrition(data: GetIngredientsFromNutrition!): [IngredientForWiki!]!
  getAllLatestRecipes(userId: String!): [Recipe!]!
  getAllLatestRecipes2(limit: Float, page: Float, userId: String!): RecipesWithPagination!
  getAllMyCreatedRecipes(limit: Float, page: Float, userId: String!): CollectionType!
  getAllMyNotes(userId: String!): [UserNote!]!
  getAllPlanCollection(memberId: String!): PlanCollectionsWithDefaultCollection!
  getAllPlannersByUserId(userId: String!): [PlannerWithRecipes!]!
  getAllPlansForACollection(limit: Float, memberId: String, page: Float, slug: String): PlansWithTotal!
  getAllPopularPlans(limit: Float, memberId: String!, page: Float): PlansWithTotal!
  getAllQAData(limit: Float, page: Float): QAAdminWithPagination!
  getAllRecentPlans(limit: Float, memberId: String!, page: Float): PlansWithTotal!
  getAllRecipes(userId: String): [Recipe!]!
  getAllRecipesBasedOnIngredient(ingredientId: String!): [Recipe!]!
  getAllRecipesByBlendCategory(data: GetAllRecipeByBlendCategory!): [Recipe!]!
  getAllRecipesForAdmin(limit: Float, page: Float): MainRecipesWithPagination!
  getAllRecipesForPlanner(limit: Float!, page: Float!, recipeBlendCategory: String, searchTerm: String!, userId: String!): PlannerRecipe!
  getAllRecipesFromCollection(userId: String!): [Recipe!]!
  getAllRecommendedPlans(limit: Float, memberId: String!, page: Float): PlansWithTotal!
  getAllRelatedCategoryRecipes(blendCategory: String!, limit: Float, page: Float, userId: String!): RecipesWithPagination!
  getAllRoles: [Role!]!
  getAllSimpleCollections(userId: String!): [SimpleCollection!]!
  getAllSpaceArchives(spaceId: String!): [SimpleSpaceArchive!]!
  getAllSpaceBlogs(spaceId: ID!): [SpaceBlog!]!
  getAllSpaceRooms(spaceId: ID!): [SpaceRoom!]!
  getAllSpaces(userId: ID): [Space!]!
  getAllTheIngredients(filter: StructureIngredientsData!): RetrurnIngredients!
  getAllThemeChannels: [ThemeChannel!]!
  getAllThemes(domain: String): [Theme!]!
  getAllUniquePortions: String!
  getAllVersions(recipeId: String!, userId: String!): ProfileRecipeDesc!
  getAllWidgetCollection(widgetId: String!): [WidgetCollecType!]!
  getAllWidgets: [WidgetType!]!
  getAllWikiCommentsForAWikiEntity(entityId: String!, userId: String!): [PopulatedWikiComment!]!
  getAllpopularRecipes(userId: String!): [Recipe!]!
  getAllpopularRecipes2(limit: Float, page: Float, userId: String!): RecipesWithPagination!
  getAllrecomendedRecipes(userId: String!): [Recipe!]!
  getAllrecomendedRecipes2(limit: Float, page: Float, userId: String!): RecipesWithPagination!
  getAllusers: [Member!]!
  getAllusersForClient: [Member!]!
  getBannerCount: String!
  getBlendIngredientById(id: String!): BlendIngredientData!
  getBlendIngredientInfoBasedOnDefaultPortion(ingredientId: String!): ReturnBlendIngredientBasedOnDefaultPortion!
  getBlendIngredientPortionById(id: String!): [BlendPortion!]!
  getBlendNutrientsBasedOnCategoey(nutrientCategoryId: String!): [BlendNutrientData!]!
  getBlendNutritionBasedIngredientsWiki2(ingredientsInfo: [BlendIngredientInfo!]!, userId: String): NutritionFromIngredient!
  getBlendNutritionBasedOnRecipeData(isVersion: Boolean!, recipeId: String!): String!
  getBlendNutritionBasedOnRecipexxx2(ingredientsInfo: [BlendIngredientInfo!]!): String!
  getBlendNutritionForScrappingPanel(ingredientsInfo: [BlendIngredientInfo!]!, mySearch: [String!]!): String!
  getChallengeById(challengeId: String!): UserChallenge!
  getChallengeGallery(memberId: String!): [ChallengePost!]!
  getChallengeInfo(challengeId: String!, memberId: String!, startDate: String, viewOnly: Boolean): ChallengeInfo!
  getChallengeInfoById(challengeId: String, memberId: String!, token: String!): ChallengeInfoForId!
  getChallengePosts(limit: Float!, memberId: String!, page: Float!): ChallengePostWithCount!
  getCompareList(userId: String!): [Recipe!]!
  getCompareList2(userId: String!): [ProfileRecipe!]!
  getDailyByUserId(userId: String!): GetDaily!
  getDailyCalorie(activity: String!, ageInYears: Float!, bmi: Float!, gender: String!, heightInCM: Float!, weightInKG: Float!): Float!
  getDailyGoals(memberId: String!): ReturnDailyGoal!
  getDefaultPortion(ingredientId: String!): Float!
  getDiscoverRecipes(userId: String!): String!
  getEntityCollection(collectionSlug: String!, widgetSlug: String!): WidgetCollectionForClient!
  getEntityWidget(currentDate: String, userId: String, widgetSlug: String!): WidgetForClient!
  getGlAndNetCarbs(versionId: String!): GiGl!
  getHealthImpactByEntityId(entityId: String!, type: String!): [HealthImpact!]!
  getHealthWikiList(ids: [String!], limit: Float, page: Float, userId: String): WikiListWithPagination!
  getIngredientInfoBasedOnDefaultPortion(ingredientId: String!): ReturnIngredientBasedOnDefaultPortion!
  getIngredientWikiList2(ids: [String!], limit: Float, page: Float, userId: String): WikiListWithPagination!
  getIngredientsFromARecipe(recipeId: String!): [IngredientData!]!
  getIngredientsStats(currentDate: String!): String!
  getInviteChallengeInfo(inviteId: String!, memberId: String): InviteInfoSharedWithAndTopIngredients!
  getInviteNotificationForChallenge(userId: String!): [ShareNotification!]!
  getLastModifieldCollection(userEmail: String!): CollectionType!
  getLastSevenDaysChallenge(memberId: String!, startDate: String): ChallengeAndChallengeDocs!
  getLatestChallengePost(memberId: String!): Challenge!
  getMyChallengeList(memberId: String!): [UserChallenge!]!
  getMyGroceryList(memberId: String!): [Grocery!]!
  getMyIngredientList(memberId: String!): [String!]!
  getMyNotesForARecipe(data: GetMyNote!): [UserNote!]!
  getMyPlans(memberId: String!): [Plan!]!
  getMyRecentRecipes(limit: Float, page: Float, userId: String!): CollectionType!
  getMyThirtyDaysChallenge(challengeId: String, memberId: String!, startDate: String, token: String): ChallengeAndChallengeDocs!
  getNutrientWikiList2(ids: [String!], limit: Float, page: Float, userId: String): WikiListWithPagination!
  getNutrientsListAndGiGlByIngredients(ingredientsInfo: [BlendIngredientInfo!]!): NutrientsWithGiGl!
  getNutrientsListAndGiGlByIngredientsForScrappingPanel(ingredientsInfo: [BlendIngredientInfo!]!): NutrientsWithGiGlForScrapper!
  getNutrientsListAndGiGlByRecipe(recipeId: ID!, versionId: ID): NutrientsWithGiGl!
  getNutritionBasedOnRecipe(ingredientsInfo: [IngredientInfo!]!): [NutrientValue!]!
  getPantryList(memberId: String!): [Grocery!]!
  getPlanCollection(collectionSlug: String!, widgetSlug: String!): WidgetCollectionForClient!
  getPlanShareInfo(planShareId: String!): PlanAndRecipes!
  getPlanWidget(currentDate: String, widgetSlug: String!): WidgetForClient!
  getPlannerByDates(endDate: String!, startDate: String!, userId: String!): PlannersIngredientAndCategory!
  getPlannerInsights(numberOfDays: Float!, recipeIds: [String!]!, userId: String!): PlannerInsights!
  getQuedPlanner(endDate: String!, startDate: String!, userId: String!): PlannerRecipe!
  getRangesForADaily(dailyId: String!): [RangeType!]!
  getRecipeCollection(collectionSlug: String!, widgetSlug: String!): WidgetCollectionForClient!
  getRecipeWidget(currentDate: String, widgetSlug: String!): WidgetForClient!
  getRelatedWiki(category: String!, type: String!, userId: String!, wikiId: String!): WikiListWithPagination!
  getRemainingIngredientsByHealthId(HealthId: String!, searchText: String): [BlendIngredientData!]!
  getRemainingNutrientsByHealthId(HealthId: String!, searchText: String): [BlendNutrientData!]!
  getShareNotification(userId: String!): ShareNotificationsWithCount!
  getShareNotificationForCollection(userId: String!): [ShareNotification!]!
  getShareNotificationForSingleRecipe(userId: String!): [ShareNotification!]!
  getSharedWithMeCollections(userId: String!): [CollectionType!]!
  getShowPercentageDaily: String!
  getSimpleAdminCollections: [SimpleAdminCollection!]!
  getSingleUSerById(userId: String!): Member!
  getSpaceById(spaceId: ID!): Space!
  getSpaceRoomById(spaceRoomId: ID!): SpaceRoom!
  getStapleList(memberId: String!): [Grocery!]!
  getThemeWidgetData: String!
  getUserCollectionsAndThemes(userId: String!): CollectionsAndTheme!
  getWidgetCollectionbySlugForClient(slug: String!, widgetSlug: String!): WidgetCollectionForClient!
  getWidgetCollections(currentDate: String, widgetSlug: String!): WidgetForClient!
  getWidgetTypeBySlug(slug: String!): String!
  getWidgetsForClient(slug: String!, userId: String): WidgetForClient!
  getWikiCollection(collectionSlug: String!, widgetSlug: String!): WidgetCollectionForClient!
  getWikiCompareList(userId: String!): [CompareBlendIngredientData!]!
  getWikiLinks(entityId: String!, links: Boolean, type: String!): WikiLinks!
  getWikiLinksForBlog(blogId: String, links: Boolean): WikiLinks!
  getWikiList(ids: [String!], limit: Float, page: Float, userId: String): AllWikiList!
  getWikiList2(userId: String): [wikiList!]!
  getWikiList3(userId: String): [wikiList!]!
  getWikiWidget(currentDate: String, widgetSlug: String!): WidgetForClient!
  gobletOfFire: String!
  gobletOfFire2: String!
  ins: String!
  populateAllRecipeFacts: String!
  qsq12: String!
  removeAllPantryAndStapleList: String!
  removeAllShare: String!
  removeNow: String!
  searchBlendIngredients(searchTerm: String!): [BlendIngredientData!]!
  searchBlendIngredientsForGrocery(memberId: String!, searchTerm: String!): [GroceryIngredientType!]!
  searchHealthData(searchText: String!): [HealthData!]!
  searchPlans(memberId: String!, searchTerm: String!): [Plan!]!
  searchRecipes(limit: Float, page: Float, searchTerm: String!, userId: String!): RecipesWithPagination!
  searchUser(searchText: String!): [Member!]!
  shanto: String!
  storeAllUniqueNutrient: String!
  testGetIngredientsStats(currentDate: String!, ingredientId: String!, memberId: String!, type: String): IngredientStatsWithPortion!
  testGetNuteientsStats(currentDate: String!, memberId: String!, nutrientId: String!, type: String): BlendNutrientStats!
  tintintin: String!
  tya: String!
  updateChallenge889: String!
  upgradeTopIngredient(challengeId: String!): String!
  util: String!
  viewSharedCollection(limit: Float, page: Float, token: String!, userId: String!): CollectionType!
  viewSharedRecipe(token: String!, userId: String!): ProfileRecipeDesc!
}

input Range {
  RDA: Boolean!
  ageInMonth: Boolean!
  ageInRange: Boolean!
  ageLessThan: Float
  ageMorethan: Float
  ageRangeFrom: Float
  ageRangeTo: Float
  dailyPercentage: Boolean!
  dailyPercentageInRange: Boolean!
  dailyPercentageRangeFrom: Float
  dailyPercentageRangeTo: Float
  dailyPercentageValue: Float
  lifeStageGroup: String!
  upperLimit: Float
  value: Float
}

type RangeType {
  RDA: Boolean!
  _id: ID!
  ageInMonth: Boolean!
  ageInRange: Boolean!
  ageLessThan: Float
  ageMorethan: Float
  ageRangeFrom: Float
  ageRangeTo: Float
  dailyPercentage: Boolean!
  dailyPercentageInRange: Boolean!
  dailyPercentageRangeFrom: Float
  dailyPercentageRangeTo: Float
  dailyPercentageValue: Float
  lifeStageGroup: String!
  units: String
  upperLimit: Float
  value: Float
}

type Recipe {
  _id: ID!
  addedToCompare: Boolean
  author: [String!]
  averageRating: Float
  brand: Brand
  collections: [ID!]
  commentsCount: Float
  cookTime: String
  datePublished: String
  defaultVersion: RecipeVersion
  description: String
  discovery: Boolean
  favicon: String
  foodCategories: [String!]
  image: [ImageType!]
  ingredients: [IngredientData!]
  isMatch: Boolean
  mainEntityOfPage: String
  name: String
  notes: Float
  numberOfRating: Float
  originalVersion: RecipeVersion
  prepTime: String
  recipeBlendCategory: RecipeCategory
  recipeCuisines: [String!]
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeYield: String
  scrappedByAdmin: Boolean
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  servingSize: Float
  servings: Float
  token: ID
  totalRating: Float
  totalTime: String
  totalViews: Float
  url: String
  userCollections: [ID!]
  userId: MemberProfileForRecipe
}

type Recipe2 {
  _id: ID!
  author: [String!]
  averageRating: Float
  brand: Brand
  collections: [ID!]
  cookTime: String
  datePublished: String
  description: String
  discovery: Boolean
  favicon: String
  foodCategories: [String!]
  image: [ImageType!]
  mainEntityOfPage: String
  name: String
  numberOfRating: Float
  originalVersion: RecipeVersion
  prepTime: String
  recipeBlendCategory: RecipeCategory
  recipeCuisines: [String!]
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeYield: String
  scrappedByAdmin: Boolean
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  servingSize: Float
  servings: Float
  token: ID
  totalRating: Float
  totalTime: String
  totalViews: Float
  url: String
  userId: MemberProfileForRecipe
}

type RecipeCategory {
  _id: ID!
  canonicalURL: String
  description: String
  icon: String
  image: String
  isPublished: Boolean
  keywords: [String!]
  metaDesc: String
  name: String!
  siteMap: String
  slug: String
  title: String
}

type RecipeComments {
  comments: [Comment!]!
  recipe: Recipe
}

type RecipeVersion {
  _id: ID
  calorie: CalorieInfo
  createdBy: MemberProfileForRecipe
  description: String
  errorIngredients: [ErrorIngredient!]
  gigl: GiGl
  ingredients: [IngredientData!]
  postfixTitle: String
  recipeId: ID
  recipeInstructions: [String!]
  selectedImage: String
  servingSize: Float
}

type RecipesWithPagination {
  recipes: [ProfileRecipe!]
  totalRecipes: Float!
}

type RelatedSource {
  source: String
  sourceId: String
  sourceNutrientName: String
  units: String
}

input RemoveACollectionInput {
  collectionId: ID
  isSharedCollection: Boolean
  userId: ID!
}

input RemoveCommentInput {
  commentId: ID!
  recipeId: ID!
  userId: ID!
}

input RemoveNote {
  noteId: ID!
  recipeId: ID!
  userId: ID!
}

type RetrurnIngredient {
  _id: ID!
  addedToBlend: Boolean
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  description: String
  featuredImage: String
  images: [String!]
  ingredientId: String
  ingredientName: String
  nutrientCount: Float
  nutrients: [NutrientValue!]
  portionCount: Float
  portions: [Portion!]
  publication_date: String
  source: String
  sourceCategory: String
  sourceId: String
  totalIngredients: Float
}

type RetrurnIngredients {
  ingredients: [RetrurnIngredient!]!
  totalIngredientsCount: Float!
}

type ReturnBlendIngredientBasedOnDefaultPortion {
  _id: ID!
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  defaultPortionNutrients: [BlendNutrient!]
  description: String
  featuredImage: String
  gi: Float
  images: [String!]
  ingredientId: String
  ingredientName: String
  portions: [BlendPortion!]
  publication_date: String
  source: String
  sourceCategory: String
  sourceId: String
  varrient: ID
}

type ReturnBlendIngredientData {
  _id: ID!
  aliases: [String!]!
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  description: String
  featuredImage: String
  gi: Float
  imageCount: Float
  images: [String!]
  ingredientName: String
  notBlendNutrientCount: Float
  nutrientCount: Float
  portions: [BlendPortion!]
  rxScore: Float
  sourceName: String
  srcFoodReference: ID
  varrient: BlendIngredientData
}

type ReturnDailyGoal {
  bmi: Float
  calories: CalorieType
  goals: String
  memberId: ID!
}

type ReturnIngredientBasedOnDefaultPortion {
  _id: ID!
  blendStatus: String
  category: String
  classType: String
  collections: [ID!]
  defaultPortionNutrients: [DefaultPortionNutrient!]
  description: String
  featuredImage: String
  images: [String!]
  ingredientId: String
  ingredientName: String
  portions: [Portion!]
  publication_date: String
  source: String
  sourceCategory: String
  sourceId: String
}

type ReturnPortion {
  default: Boolean!
  gram: Float!
  name: String!
  quantity: Float
}

type ReturnRatingInfo {
  averageRating: Float!
  myRating: Float!
  numberOfRating: Float!
}

type Role {
  Admin: RoleType
  All: RoleType
  Blend: RoleType
  Dashboard: RoleType
  Shop: RoleType
  Space: RoleType
  Users: RoleType
  Wiki: RoleType
  _id: ID!
  createdAt: DateTime
  roleName: String
}

type RoleType {
  create: Boolean!
  delete: Boolean!
  edit: Boolean!
  view: Boolean!
}

input RoleTypeInput {
  create: Boolean!
  delete: Boolean!
  edit: Boolean!
  view: Boolean!
}

type SelectedPortion {
  gram: Float!
  name: String!
  quantity: Float!
}

type ShareBy {
  _id: ID
  displayName: String
  email: String!
  firstName: String
  image: String
  lastName: String
}

input ShareData {
  recipeId: ID!
  turnedOnVersions: [String!]!
  version: String!
}

type ShareNotification {
  _id: ID!
  createdAt: DateTime!
  image: String
  shareData: MyShareData
  sharedBy: ShareBy
  type: String!
}

type ShareNotificationsWithCount {
  shareNotifications: [ShareNotification!]
  totalNotification: Float
}

type ShareRecipe {
  _id: ID!
  name: String!
}

input ShareTo {
  canContribute: Boolean!
  canShareWithOthers: Boolean!
  shareToEmail: String!
}

type SharedWith {
  blendScore: Float
  canInviteWithOthers: Boolean
  memberId: Member!
}

type ShowAllCollection {
  _id: ID
  canContribute: Boolean
  canShareWithOther: Boolean
  description: String
  image: String
  isShared: Boolean
  name: String
  personalizedName: String
  recipes: [ProfileRecipe!]
  sharedBy: Member
  slug: String
}

type SimpleAdminCollection {
  _id: ID!
  collectionType: String!
  name: String!
}

type SimpleCollection {
  _id: ID!
  canContribute: Boolean
  canShareWithOther: Boolean
  description: String
  image: String
  isShared: Boolean
  name: String
  personalizedName: String
  recipes: [ID!]
  sharedBy: Member
  slug: String
}

type SimpleHealthData {
  _id: ID!
  aliases: [String!]
  category: String!
  class: String
  collections: [ID!]
  createdAt: DateTime
  description: String
  featuredImage: String
  foodCount: Float
  healthTopic: String!
  imageCount: Float
  images: [String!]
  isPublished: Boolean
  nutrientCount: Float
  source: String
  status: String
}

type SimpleRecipe {
  _id: ID!
  addedToCompare: Boolean
  author: [String!]
  averageRating: Float
  brand: Brand
  collections: [ID!]
  commentsCount: Float
  cookTime: String
  datePublished: String
  description: String
  discovery: Boolean
  favicon: String
  foodCategories: [String!]
  image: [ImageType!]
  ingredients: [IngredientData!]
  mainEntityOfPage: String
  name: String
  notes: Float
  numberOfRating: Float
  originalVersion: RecipeVersion
  prepTime: String
  recipeBlendCategory: RecipeCategory
  recipeCuisines: [String!]
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeYield: String
  scrappedByAdmin: Boolean
  seoCanonicalURL: String
  seoKeywords: [String!]
  seoMetaDescription: String
  seoSiteMapPriority: Float
  seoSlug: String
  seoTitle: String
  servingSize: Float
  servings: Float
  totalRating: Float
  totalTime: String
  totalViews: Float
  url: String
  userCollections: [ID!]
  userId: MemberProfileForRecipe
  versionCount: Float
}

type SimpleSpaceArchive {
  _id: ID!
  archiveName: String!
  blogsCount: Float!
  createdBy: ID
  icon: String
  spaceBlogs: [ID!]
  spaceId: ID!
}

type SimpleSpaceRoom {
  _id: ID!
  createdAt: DateTime!
  createdBy: ID
  description: String
  isActive: Boolean
  name: String!
  spaceId: ID!
  updatedAt: DateTime!
}

type SingleWidgetCollecType {
  _id: ID!
  bannerId: Banner
  collectionData: AdminCollection
  displayName: String
  expiryDate: String
  filter: FilterType
  icon: String
  isPublished: Boolean
  orderBy: String
  publishDate: String
  publishedBy: ID
  showTabMenu: Boolean
  slug: String
  theme: Theme
}

type Space {
  _id: ID!
  createdAt: DateTime!
  createdBy: Admin
  description: String!
  facilitators: [UserFacilitator!]!
  guests: [GuestFacilitator!]!
  meetupSolutions: MeetupSolutions!
  members: [MemberFacilitator!]!
  name: String!
}

type SpaceBlog {
  _id: ID!
  author: Member!
  body: String
  category: String
  coverImage: String
  createdAt: DateTime!
  description: String
  isPublished: Boolean
  keywords: [String!]
  mediaLength: Float
  mediaUrl: String
  slug: String!
  spaceId: Space!
  title: String!
  type: String
  updatedAt: DateTime!
}

type SpaceRoom {
  _id: ID!
  createdAt: DateTime!
  createdBy: Member
  description: String
  isActive: Boolean
  name: String!
  spaceId: ID!
  updatedAt: DateTime!
}

input StructureIngredientsData {
  page: Float
  rowsPerPage: Float
  search: String
  sort: String
}

type Theme {
  _id: ID!
  createdAt: DateTime!
  description: String
  domain: String
  link: String
  style: String
  themeName: String!
  thumbnailImage: String
  updatedAt: DateTime
  viewPorts: [String!]!
}

type ThemeChannel {
  _id: ID!
  name: String!
}

input ThemeInput {
  description: String!
  domain: String!
  link: String!
  style: String!
  themeName: String!
  thumbnailImage: String!
  viewPorts: [String!]!
}

type TopIngredientData {
  _id: ID!
  count: Float
  featuredImage: String
  name: String
}

type UniqueNutrient {
  _id: ID
  category: String
  mapTo: ID
  max: String
  min: String
  nutrient: String
  nutrientId: String
  parentNutrient: UniqueNutrient
  publication_date: String
  rank: Float
  related_sources: [RelatedSource!]
  unitName: String
  units: String
}

type UserChallenge {
  _id: ID!
  canInviteWithOthers: Boolean
  challengeName: String!
  days: Float!
  description: String!
  endDateString: String!
  hasCreatedByMe: Boolean
  isActive: Boolean
  memberId: String!
  notification: Boolean!
  startDateString: String!
  startingDate: String
}

type UserFacilitator {
  email: String
  invitedBy: Admin
  message: String!
  userId: Member
}

type UserNote {
  _id: ID!
  body: String!
  createdAt: DateTime!
  recipeId: ID!
  title: String!
  updatedAt: DateTime
  userId: ID!
}

type ValueUnit {
  units: String
  upperLimit: Float
  value: String
  value2: String
}

type WidgetCollecType {
  _id: ID!
  banner: String
  bannerId: String
  collectionData: AdminCollection
  displayName: String
  expiryDate: String
  filter: FilterType
  icon: String
  isPublished: Boolean
  orderBy: String
  publishDate: String
  publishedBy: ID
  showTabMenu: Boolean
  slug: String
  theme: String
}

input WidgetCollection {
  banner: String
  bannerId: ID
  collectionData: ID!
  displayName: String!
  expiryDate: String
  filter: AddFilterInput
  icon: String
  isPublished: Boolean
  orderBy: String
  publishDate: String
  publishedBy: ID
  showTabMenu: Boolean
  slug: String!
  theme: String!
}

type WidgetCollectionForClient {
  _id: ID!
  banner: String
  bannerLink: String
  collectionData: AdminCollection
  data: DataType
  displayName: String
  expiryDate: String
  filter: FilterType
  icon: String
  publishDate: String
  showTabMenu: Boolean
  slug: String
  theme: Theme
}

type WidgetForClient {
  _id: ID!
  bannerId: Banner
  slug: String!
  widgetCollections: [WidgetCollectionForClient!]
  widgetName: String
  widgetType: String
}

type WidgetType {
  _id: ID!
  bannerId: ID
  clickCount: Float
  collectionCount: Float
  slug: String
  viewCount: Float
  widgetCollections: [SingleWidgetCollecType!]
  widgetName: String
  widgetType: String
}

type WikiLinks {
  bookmarks: [Bookmark!]!
  globalBookmarks: [ExternalBookmark!]!
  ingredientLinks: [IngredientWikiLink!]
  nutrientLinks: [NutrientWikiLink!]
}

type WikiListWithPagination {
  total: Float
  wikiList: [wikiList!]!
}

"""The types"""
enum WikiType {
  HEALTH
  INGREDIENT
  NUTRIENT
}

"""The basic directions"""
enum category {
  energy
  mineral
  vitamin
}

input editChildrenInCollection {
  adminCollectionId: ID!
  checked: Boolean!
  children: [ID!]!
}

type inviteInfo {
  challengeId: ChallengeInfo!
  invitedBy: Member!
}

type map {
  nutrientName: String
  rank: Float
  srcUniqueNutrientId: ID
}

"""The basic directions"""
enum mergerOrRemove {
  MERGE
  REPLACE
}

type nutrientForScrapper {
  name: String
  units: String
  value: Float
}

type wikiList {
  _id: ID!
  author: Admin
  category: String
  collections: [ID!]
  commentsCount: Float
  description: String
  hasInCompare: Boolean
  image: String
  isPublished: Boolean
  portions: [Portion!]
  publishDate: DateTime
  status: String
  type: String
  wikiDescription: String
  wikiTitle: String
}
